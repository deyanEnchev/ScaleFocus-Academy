// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package sqlcDB

import (
	"context"
	"database/sql"
)

const createStory = `-- name: CreateStory :exec
INSERT INTO top_stories(
id,title,score,time_stored
) VALUES(
?, ?, ?, ?
) ON DUPLICATE KEY UPDATE time_stored = ?
`

type CreateStoryParams struct {
	ID           int32
	Title        sql.NullString
	Score        sql.NullInt32
	TimeStored   sql.NullString
	TimeStored_2 sql.NullString
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) error {
	_, err := q.db.ExecContext(ctx, createStory,
		arg.ID,
		arg.Title,
		arg.Score,
		arg.TimeStored,
		arg.TimeStored_2,
	)
	return err
}

const listStories = `-- name: ListStories :many

SELECT id, title, score, time_stored FROM top_stories
ORDER BY score DESC
`

// -- name: GetStory :one
// SELECT * FROM top_stories
// WHERE id = $1 LIMIT 1;
func (q *Queries) ListStories(ctx context.Context) ([]TopStory, error) {
	rows, err := q.db.QueryContext(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopStory
	for rows.Next() {
		var i TopStory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Score,
			&i.TimeStored,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
