// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package sqlc

import (
	"context"
)

const createList = `-- name: CreateList :exec
INSERT INTO user_lists (user_id, name) 
VALUES (?,?)
`

type CreateListParams struct {
	UserID int32
	Name   string
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) error {
	_, err := q.db.ExecContext(ctx, createList, arg.UserID, arg.Name)
	return err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO user_tasks (list_id, text, completed)
VALUES (?, ?, ?)
`

type CreateTaskParams struct {
	ListID    int32
	Text      string
	Completed bool
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask, arg.ListID, arg.Text, arg.Completed)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM user_lists WHERE id=?
`

func (q *Queries) DeleteList(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM user_tasks WHERE id=?
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM login_info WHERE id=?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getLists = `-- name: GetLists :many
SELECT id,user_id,name FROM user_lists WHERE user_id=?
`

func (q *Queries) GetLists(ctx context.Context, userID int32) ([]UserList, error) {
	rows, err := q.db.QueryContext(ctx, getLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserList
	for rows.Next() {
		var i UserList
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecificUser = `-- name: GetSpecificUser :one
SELECT id, username, password FROM login_info WHERE username=?
`

func (q *Queries) GetSpecificUser(ctx context.Context, username string) (LoginInfo, error) {
	row := q.db.QueryRowContext(ctx, getSpecificUser, username)
	var i LoginInfo
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, list_id, text, completed FROM user_tasks WHERE id=?
`

func (q *Queries) GetTask(ctx context.Context, id int32) (UserTask, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i UserTask
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Text,
		&i.Completed,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, list_id, text, completed FROM user_tasks WHERE list_id=?
`

func (q *Queries) GetTasks(ctx context.Context, listID int32) ([]UserTask, error) {
	rows, err := q.db.QueryContext(ctx, getTasks, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserTask
	for rows.Next() {
		var i UserTask
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Text,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLists = `-- name: GetUserLists :many
SELECT
    user_lists.id
FROM
	login_info
INNER JOIN
	user_lists
ON
	login_info.id=user_lists.user_id
WHERE
	login_info.id=?
`

func (q *Queries) GetUserLists(ctx context.Context, id int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getUserLists, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTasks = `-- name: GetUserTasks :many
SELECT
	user_lists.name, user_tasks.text, user_tasks.completed
FROM
	login_info
INNER JOIN
	user_lists
ON
	login_info.id=user_lists.user_id
INNER JOIN
	user_tasks
ON
	user_lists.id=user_tasks.list_id
WHERE
	login_info.id=?
`

type GetUserTasksRow struct {
	Name      string
	Text      string
	Completed bool
}

func (q *Queries) GetUserTasks(ctx context.Context, id int32) ([]GetUserTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTasks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTasksRow
	for rows.Next() {
		var i GetUserTasksRow
		if err := rows.Scan(&i.Name, &i.Text, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password FROM login_info
`

func (q *Queries) GetUsers(ctx context.Context) ([]LoginInfo, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoginInfo
	for rows.Next() {
		var i LoginInfo
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveLoginInfo = `-- name: SaveLoginInfo :exec
INSERT INTO login_info (username, password) 
VALUES (?, ?)
`

type SaveLoginInfoParams struct {
	Username string
	Password string
}

func (q *Queries) SaveLoginInfo(ctx context.Context, arg SaveLoginInfoParams) error {
	_, err := q.db.ExecContext(ctx, saveLoginInfo, arg.Username, arg.Password)
	return err
}

const toggleTask = `-- name: ToggleTask :exec
UPDATE user_tasks SET completed = ? WHERE id = ?
`

type ToggleTaskParams struct {
	Completed bool
	ID        int32
}

func (q *Queries) ToggleTask(ctx context.Context, arg ToggleTaskParams) error {
	_, err := q.db.ExecContext(ctx, toggleTask, arg.Completed, arg.ID)
	return err
}
